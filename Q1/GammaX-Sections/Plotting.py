##preamble

import numpy as np
from scipy import optimize
import matplotlib.pyplot as plt

## Data Induction
print(energies) #generated by Attenuation.py -- run those cells in the same kernel as this script

NistDataPath = 'C:/Users/jdewh/OneDrive - The University of Chicago/Third Year/PHYS 211/Q1/Python Scripts/GammaX-Sections/nist_mu_al.txt'

savePath = 'C:/Users/jdewh/OneDrive - The University of Chicago/Third Year/PHYS 211/Q1/Python Scripts/GammaX-Sections/AttenuationComparison.png'

NistVals = np.loadtxt(NistDataPath, unpack=True, skiprows=1)

print(NistVals[:, :3])
NistVals[1] *= .1 #unit conversion: cm^{-1} -> mm^{-1}
print(NistVals[:, :3])


#find bounds of relevant data
emin = min(energies)
emax = max(energies)

eminIndex = 0
emaxIndex = 0

for i, e in enumerate(NistVals[0]):
    if(e >= emin and eminIndex == 0):
        eminIndex = i - 4
    if(e > emax):
        emaxIndex = i +2
        break

print(eminIndex, emaxIndex)
## Plotting Attenuation Coefficients
plt.clf()

plt.figure(figsize=(8,6))
plt.title('Measured Attenuation Coefficients vs Literature')
plt.xlabel('Energy (keV)')
plt.xscale('log')
plt.ylabel('Attenuation Coefficient (mm$^{-1}$)')
plt.yscale('log')

plt.plot(NistVals[0][eminIndex:emaxIndex], NistVals[1][eminIndex:emaxIndex], 'k--', lw='.5', markersize=1, label='NIST Values')
plt.errorbar(energies, coeffs, dcoeffs, fmt='r.', lw=1, markersize=2, capsize=3, label='measured values')

plt.legend(loc='upper right')
plt.savefig(savePath)
plt.show()